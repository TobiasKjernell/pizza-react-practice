trying another type of file-structure. keeping files relevant to folders.
trying out the new routing system from react-router-dom. (createBrowserRouter).

to fetch in router when you going to that page you need the 3 steps:
1. use the 'loader' attribute in route.
2. in your component that going to use the fetch. make a function with fetching ability and return the result.
3. in your component, use a custom hook called 'useLoaderData()' which is provided by react-router-dom. 'const menu = useLoaderData();'

----

loader spinner: in appLayout.jsx we can use something called 'useNavigation'-custom hook. (provided by react-router).
it checks the current state of the page. So when we fetch it still loading the page etc: we click on a page link, it fetch and 
current state will be in 'loading', when it's done loading => turns to 'idle'.
Here we can render a spinner loader or any kind of visual loader.

---- Error handling in routes:

in your parent router, use the attribute: 'errorElement: <component />'.
In your 'error'-component, use the customHook useRouteError() provdied by lib.
useRouterError() receives a object with: data, error[message, stack], internalBool, status: 404/xxx, statusText: string.

You can also put it inside the route with a 'loader' fetching if you want to keep it
in it's own layout.

--- Params

Getting params from 'loader'.
React Route provides a object within the loader(params).
etc: orderLoader({params})..
very similiar to nextj.

--- Writing data / post from router

<Form /> provided by react has alot done for us. We use the attribute 'method' POST/PATCH/DELETE.
In our route for this page there's a route attribute called: 'action'.
This attribute listens on any submit and execute it's delegated function.
In this delegated 'action', usually a async method. It provides some deconstructed variables we can use,
in this case we use 'request'. 
By using 'request.formData()' and then 'Object.fromEntries(formData)', we get make all the information into a object.
We create a new object using existing data, overrite the variable we have to put new information in. 
We can also return a 'redirect' from react routers when done.

--- Error handling <Form /> information
Make an object{}, make if/checks on each input, if any of these are wrong, fill the new object with it.
As we return a redirect or this object is up to errors found.
At the top we get the actionInfo sent ()

--- Tailwind
visit their homepage for install. 
they have their own 'api' for all the classnames. classnames are built after normal css with different
enchancement. 
You don't need seperated files for css, you declare/write them in the class/classname attribute.
It can be very messy overtime if you are not used to it.

Tailwind is mobile first. 

@layer component {
    .class {
        @apply <tailwind styles>
    }
}
This is a way to reause a class with tailwind-styles.
If you have component with html that needs same class-styles. 
Save to variable and put it into className="".

To create custom variables or overrite: 
@theme {
    --varName: value
}
